# This file will contain the logic for the 'generate' command.

def run_generation(output_dir="docs/"):
    """
    Main function to handle the document generation process.
    - Reads data (placeholder for now)
    - Loads templates (placeholder for now)
    - Renders templates (placeholder for now)
    - Writes output files to output_dir (placeholder for now)
    """
    import os
    import json
    from string import Template

    print(f"Generation process started. Output will be in '{output_dir}'")

    # Define paths
    templates_dir = os.path.join(os.path.dirname(__file__), "templates")
    # For now, let's assume a simple data source, e.g., a JSON file.
    # This can be made more flexible later.
    data_file = os.path.join(os.path.dirname(__file__), "data.json") # Example data file

    # 1. Read data
    # For this example, we'll create a dummy data.json if it doesn't exist
    # In a real scenario, this data would be provided or configured.
    if not os.path.exists(data_file):
        sample_data = {
            "page1": {"title": "Hello World", "content": "This is the first page generated by Trouble.", "filename": "page_one"},
            "page2": {"title": "Another Page", "content": "Content for the second page.", "filename": "page_two"}
        }
        with open(data_file, "w") as f:
            json.dump(sample_data, f, indent=2)
        print(f"Created sample data file: {data_file}")

    try:
        with open(data_file, "r") as f:
            data_objects = json.load(f)
    except FileNotFoundError:
        print(f"Error: Data file {data_file} not found.")
        return
    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from {data_file}.")
        return

    # 2. Create output directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)
    print(f"Ensured output directory exists: {output_dir}")

    # 3. Load templates, render, and write files
    # This will look for .md.template and .html.template files in trouble/templates/
    # and render one output file per data object found in data.json

    found_templates = False
    for template_filename in os.listdir(templates_dir):
        template_path = os.path.join(templates_dir, template_filename)
        if not os.path.isfile(template_path) or \
           not (template_filename.endswith(".md.template") or template_filename.endswith(".html.template")):
            if template_filename != ".gitkeep": # Optionally silence .gitkeep, or handle it more generally
                print(f"Skipping non-template file: {template_filename}")
            continue

        try:
            with open(template_path, "r") as f:
                template_content = f.read()
            tmpl = Template(template_content)
            found_templates = True
            print(f"Loaded template: {template_filename}")

            for key, data in data_objects.items():
                rendered_content = tmpl.substitute(data)

                output_filename_base = data.get("filename", key)

                if template_filename.endswith(".md.template"):
                    output_filename = f"{output_filename_base}.md"
                elif template_filename.endswith(".html.template"):
                    output_filename = f"{output_filename_base}.html"
                # No else needed here due to the check at the start of the loop

                output_file_path = os.path.join(output_dir, output_filename)
                with open(output_file_path, "w") as f:
                    f.write(rendered_content)
                print(f"Generated {output_file_path}")

        except Exception as e:
            print(f"Error processing template {template_filename}: {e}")
            # Continue to the next template file in case of an error with one.
            continue

    if not found_templates:
        print(f"No templates found in {templates_dir}. Please add some .md.template or .html.template files.")

    print("Generation process finished.")

if __name__ == "__main__":
    # This allows testing generator.py directly if needed.
    # For testing, it will create a 'docs' folder in the current directory.
    # And a 'data.json' inside 'trouble' directory if not present.

    # Create dummy templates for direct testing if they don't exist
    test_templates_dir = os.path.join(os.path.dirname(__file__), "templates")
    os.makedirs(test_templates_dir, exist_ok=True)
    if not os.path.exists(os.path.join(test_templates_dir, "basic.md.template")):
        with open(os.path.join(test_templates_dir, "basic.md.template"), "w") as f:
            f.write("# ${title}\n\n${content}\n\nGenerated from basic.md.template")
    if not os.path.exists(os.path.join(test_templates_dir, "basic.html.template")):
        with open(os.path.join(test_templates_dir, "basic.html.template"), "w") as f:
            f.write("<html><head><title>${title}</title></head><body><h1>${title}</h1><p>${content}</p><p>Generated from basic.html.template</p></body></html>")

    run_generation()
