name: Daily Data Fetch and Release

on:
  schedule:
    # Runs at 01:00 UTC daily. Adjust as needed.
    # Recommendation: Choose a time with generally low activity for your APIs.
    - cron: '0 1 * * *'
  workflow_dispatch: # Allows manual triggering from the Actions tab

jobs:
  fetch-and-release-data:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed by softprops/action-gh-release to create releases/tags
      # Other permissions might be needed if your etudes access private resources via tokens

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # If you want to commit back to the repo (alternative to releases), you'd need:
        # with:
        #   token: ${{ secrets.YOUR_PAT_IF_NEEDED }} # A PAT if GITHUB_TOKEN doesn't have push rights to protected main

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Or your preferred Python version

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Run daily data fetching tasks
        id: daily_run
        run: |
          echo "Running trouble daily script with poetry..."
          # Execute the script and capture its JSON output.
          # The script prints JSON between specific markers.
          OUTPUT_JSON=$(poetry run trouble daily)

          # Extract JSON content between markers
          # This assumes your script prints "--- Daily Tasks Output JSON Start ---"
          # and "--- Daily Tasks Output JSON End ---" around the JSON block.
          JSON_CONTENT=$(echo "$OUTPUT_JSON" | awk '/--- Daily Tasks Output JSON Start ---/{flag=1; next} /--- Daily Tasks Output JSON End ---/{flag=0} flag')

          if [ -z "$JSON_CONTENT" ]; then
            echo "::error::Failed to extract JSON content from daily script output."
            echo "Full output was:"
            echo "$OUTPUT_JSON"
            exit 1
          fi

          # Validate JSON (optional but good practice)
          echo "$JSON_CONTENT" | python -m json.tool > /dev/null
          if [ $? -ne 0 ]; then
            echo "::error::Extracted content is not valid JSON."
            echo "Extracted content was:"
            echo "$JSON_CONTENT"
            exit 1
          fi

          echo "Successfully extracted JSON content."
          # Save the extracted JSON to a file for upload
          echo "$JSON_CONTENT" > daily_etude_data.json
          echo "Saved data to daily_etude_data.json"
          cat daily_etude_data.json # Print file content to logs for verification

      - name: Get Release Info
        id: get_release_info
        run: |
          RELEASE_INFO_JSON=$(poetry run trouble github-actions create-release-info)
          echo "RELEASE_INFO_JSON<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_INFO_JSON" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Rename log file
        run: mv trouble.log daily.log

      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ fromJson(steps.get_release_info.outputs.RELEASE_INFO_JSON).tag_name }}
          name: ${{ fromJson(steps.get_release_info.outputs.RELEASE_INFO_JSON).release_name }}
          body: |
            Automated daily data release for etudes.
            Contains `daily_etude_data.json` with fetched content and `daily.log` with execution logs.
          draft: false
          prerelease: false
          files: |
            daily_etude_data.json
            daily.log

      # Optional: Cleanup old releases (more complex, consider for later)
      # - name: Cleanup Old Data Releases
      #   if: success() # Only run if release succeeded
      #   uses: ... some action or script to list and delete old releases ...
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     days_to_keep: 7 # Or number of releases to keep

      - name: Echo success message
        run: echo "Daily data fetch and release process completed successfully."

  prune-old-releases:
    runs-on: ubuntu-latest
    needs: fetch-and-release-data # Run only after a new release is successfully created
    permissions:
      contents: write # Required to delete releases/tags

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # This was the missing step

      - name: Prune old data releases
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          DATA_PREFIX="data-daily-"
          echo "Finding data releases with prefix '${DATA_PREFIX}' to prune (keeping latest 7)..."
          gh release list --repo "$GH_REPO" --limit 100 --json tagName,name,createdAt,publishedAt | \
          jq -r --arg prefix "$DATA_PREFIX" '[.[] | select(.tagName|startswith($prefix))] | sort_by(.publishedAt // .createdAt // "") | reverse | .[7:] | .[].tagName' | \
          while read -r tag; do
            if [ -z "$tag" ]; then
              continue
            fi
            echo "Deleting release and tag: $tag"
            if ! gh release delete "$tag" --repo "$GH_REPO" --yes --cleanup-tag; then
              echo "Release deletion failed for $tag. Attempting to delete tag ref only..."
              gh api --method DELETE "repos/$GH_REPO/git/refs/tags/$tag" || echo "Tag ref deletion failed for $tag"
            fi
          done
          echo "Prune complete."

# Notes for user:
# 1. GITHUB_TOKEN: The default GITHUB_TOKEN has permissions to create releases in the same repository.
#    If you encounter permission issues, you might need a Personal Access Token (PAT) with `repo` or `public_repo` scope,
#    stored as a secret (e.g., `GH_PAT_RELEASES`) and passed to the release action's `token` input.
# 2. Release Pruning: GitHub Actions do not have a built-in way to easily prune old releases by count or age.
#    This would require custom scripting using the GitHub API (e.g., via `gh` CLI or a dedicated action).
#    For now, old releases will accumulate.
# 3. Error Handling: The JSON extraction is basic. If the Python script's output format changes,
#    the awk command might need adjustment. Consider more robust output handling from the Python script if needed.
# 4. Cron Schedule: '0 1 * * *' is 1 AM UTC. Adjust this to your preferred time.
#    See https://crontab.guru/ for help with cron expressions.
