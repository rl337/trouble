name: Generate and Publish Docs

on:
  push:
    branches:
      - main # Or your default branch

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to commit changes to the repo (for gh-pages branch)
      pages: write    # Required to deploy to GitHub Pages
      id-token: write # Required for OIDC token if using trusted publishing

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Use a recent Python 3 version

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Generate Documentation
        run: poetry run trouble generate
        # Add arguments if your script requires them, e.g.:
        # run: python -m trouble generate --output-dir ./public

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: './docs' # This should be the output directory of your generator script

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        # if: github.ref == 'refs/heads/main' # Only deploy from main branch
        # with:
          # By default, this action deploys from the 'gh-pages' branch.
          # If your generator script outputs to a directory like 'docs/' in the main branch,
          # you might need a separate step to push that directory to the 'gh-pages' branch
          # or configure GitHub Pages to deploy from a folder in your main branch.

          # Example for deploying from 'gh-pages' branch (if you push generated content there):
          # github_token: ${{ secrets.GITHUB_TOKEN }}
          # branch: gh-pages

          # Example for deploying from a folder in the current branch (e.g., 'docs/' in 'main'):
          # (Ensure your GitHub Pages settings in the repository are configured for this source)
          # folder: docs # The folder the action should deploy.
          # This configuration is simpler if your generator outputs to a folder like 'docs'
          # and you set up GitHub Pages to serve from 'main' branch and '/docs' folder.
          # For this to work, the 'Upload artifact' step should point to this folder.
          # And your repository's GitHub Pages settings should be "Deploy from a branch"
          # using the 'main' branch and the '/docs' folder.
#
# Further customization might be needed depending on how you want to manage the generated files:
# 1. Commit to `main` branch in a `docs` folder:
#    - The `Generate Documentation` step outputs to `docs/`.
#    - GitHub Pages is configured to serve from the `docs/` folder of the `main` branch.
#    - The `Upload artifact` and `Deploy to GitHub Pages` steps are configured as above.
#    - You'll need to add steps to commit and push the `docs/` folder if it changes.
#
# 2. Commit to a `gh-pages` branch:
#    - The `Generate Documentation` step outputs to some temporary directory.
#    - Add a step to checkout the `gh-pages` branch (or create it).
#    - Copy the generated files to this branch.
#    - Commit and push the `gh-pages` branch.
#    - The `Deploy to GitHub Pages` action will then use this branch.
#      (This is a common pattern, e.g., using actions like `peaceiris/actions-gh-pages`)

# For simplicity, this initial setup assumes you'll configure GitHub Pages
# to deploy from the `/docs` folder of your `main` branch.
# The `Upload artifact` and `Deploy to GitHub Pages` steps are set up for this.
# If you choose another method, these steps will need adjustment.
